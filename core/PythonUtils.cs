using System;
using System.Diagnostics;
using System.IO;
using Newtonsoft.Json.Linq;
using Microsoft.Win32;
using pulse.collection;

namespace pulse.core
{
    class PythonUtils : CacheHandler
    {
        // Public variables
        static public string SCRIPT_VSRSTATS = "scripts/VSR_STATS.py";
        static public string SCRIPT_VSRPEAKS = "scripts/VSR_PEAKS.py";
        static public string SCRIPT_VSRPOINCARE = "scripts/VSR_POINCARE.py";
        static public string SCRIPT_VSRFOURIER = "scripts/VSR_FOURIER.py";
        static public string SCRIPT_VSRFREQUENCY = "scripts/VSR_FREQUENCY.py";

        // Private variables
        private Record _record;

        // Getters & Setters
        public Record Record { get => _record; set => _record = value; }

        // Constructors
        public PythonUtils(Record record) : base(record) => _record = record;

        // Public functions
        public JToken Excute(string script)
        {
            try
            {
                string propretyName = formatPropretyName(script);
                var cache = base.Cache["data"][propretyName];
                if (cache != null) return cache;

                string args = "-i " + Path.GetFullPath(_record.getFileName());
                return run_cmd(script, args);
            } 
            catch(Exception e)
            {
                throw e;
            }
        }

        // Utils functions
        private string getRegistryValue(string path, string value)
        {
            try
            {
                // TODO: Get python path iterable (recursive)
                using (RegistryKey key = Registry.CurrentUser.OpenSubKey(path))
                {
                    if (key == null) return null;
                    return key.GetValue(value) as string;
                }
            }
            catch (Exception ex)  //just for demonstration...it's always best to handle specific exceptions
            {
                throw ex;
            }
        }
        private JToken run_cmd(string script, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = getRegistryValue(@"Software\Python\PythonCore\3.8\InstallPath", "ExecutablePath");
            start.Arguments = string.Format("\"{0}\" \"{1}\"", script, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    var obj = JObject.Parse(result).First;
                    base.Write(obj); // Save results to cache
                    return obj.First;
                }
            }
        }
        private string formatPropretyName(string script) {
            string key = "VSR_";
            int s = script.IndexOf(key);
            int e = script.IndexOf(".py");
            return script.Substring(s + key.Length, e - s - key.Length).ToLower();
        }

    }
}
